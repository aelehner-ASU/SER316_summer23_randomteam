//RoomUI

package main.java.memoranda.ui;

//import javax.swing.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import javax.swing.SwingUtilities;
import java.awt.event.ActionEvent;
import java.util.*;

import javax.swing.*;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import main.java.memoranda.date.CalendarDate;
import main.java.memoranda.date.CurrentDate;
import main.java.memoranda.date.DateListener;
import main.java.memoranda.util.AgendaGenerator;
import main.java.memoranda.util.CurrentStorage;
import main.java.memoranda.util.Local;
import main.java.memoranda.util.Util;

import javax.swing.JOptionPane;
import main.java.memoranda.util.*;

import nu.xom.Element;

 public class RoomPanel extends JPanel {   
	JEditorPane viewer = new JEditorPane("text/html", "");
	String[] priorities = {"Highest","High","Normal","Low","Lowest"};
	JScrollPane scrollPane = new JScrollPane();
	JButton newRoomB = new JButton();
	EventsTable eventsTable = new EventsTable();

	DailyItemsPanel parentPanel = null;

 public RoomPanel(DailyItemsPanel _parentPanel) {
			ex.printStackTrace();
		}
	}
    

	void jbInit() throws Exception {
		expandedTasks = new ArrayList();

 else if (d.startsWith("memoranda:tasks")) {
		historyForwardB.setMaximumSize(new Dimension(24, 24));
		historyForwardB.setText("");

		
		newRoomB.setIcon(
				new ImageIcon(Objects.requireNonNull(AppFrame.class.getResource("/ui/icons/event_new.png"))));
		newRoomB.setEnabled(true);
		newRoomB.setMaximumSize(new Dimension(24, 24));
		newRoomB.setMinimumSize(new Dimension(24, 24));
		newRoomB.setToolTipText(Local.getString("Add new class"));
		newRoomB.setRequestFocusEnabled(false);
		newRoomB.setPreferredSize(new Dimension(24, 24));
		newRoomB.setFocusable(false);
		newRoomB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent e) {
				newRoomB_actionPerformed(e);
			}
		});
		newRoomB.setBorderPainted(false);


		this.setLayout(borderLayout1);
		scrollPane.getViewport().setBackground(Color.white);

		scrollPane.getViewport().add(viewer, null);
		this.add(scrollPane, BorderLayout.CENTER);
		toolBar.add(historyBackB, null);
		toolBar.add(historyForwardB, null);
		toolBar.add(newRoomB, null); // added by ehakobya
		toolBar.addSeparator(new Dimension(8, 24));

		this.add(toolBar, BorderLayout.NORTH);
 public void eventsChanged() {
		//			public void actionPerformed(ActionEvent e) {
		//				toggleShowActiveOnly_actionPerformed(e);
		//			}
		//		});		
		//		});
		//		boolean isShao = (Context.get("SHOW_ACTIVE_TASKS_ONLY") != null)
		//			&& (Context.get("SHOW_ACTIVE_TASKS_ONLY").equals("true"));
		//		ppShowActiveOnlyChB.setSelected(isShao);
		//		toggleShowActiveOnly_actionPerformed(null);
	}


	void newRoomB_actionPerformed(ActionEvent e) {
		Calendar cdate = CurrentDate.get().getCalendar();
		// round down to hour
		cdate.set(Calendar.MINUTE,0);
		Util.debug("Default time is " + cdate);

		newRoomB_actionPerformed(e, null, cdate.getTime(), cdate.getTime());
	}

	
	void newRoomB_actionPerformed(ActionEvent e, String tasktext, Date startDate, Date endDate) {
		AddNewClassDialog dlg = new AddNewClassDialog(App.getFrame(), Local.getString("Add new class"));
		Dimension frmSize = App.getFrame().getSize();
		Point loc = App.getFrame().getLocation();
		if (tasktext != null) {
			dlg.classNameInputField.setText(tasktext);
		}
		dlg.startDate.getModel().setValue(startDate);
		dlg.endDate.getModel().setValue(endDate);
		dlg.classTimeSpin.getModel().setValue(startDate);

		dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x, (frmSize.height - dlg.getSize().height) / 2 + loc.y);
		dlg.setEventDate(startDate);
		dlg.setVisible(true);
		if (dlg.CANCELLED)
			return;
		Calendar calendar = new GregorianCalendar(Local.getCurrentLocale());
		calendar.setTime(((Date)dlg.classTimeSpin.getModel().getValue()));
		int hh = calendar.get(Calendar.HOUR_OF_DAY);
		int mm = calendar.get(Calendar.MINUTE);

		String text = dlg.classNameInputField.getText();
		CalendarDate eventCalendarDate = new CalendarDate(dlg.getEventDate());
		if (dlg.noRepeatRB.isSelected())
			EventsManager.createEvent(eventCalendarDate, hh, mm, text);
		else {
			updateEvents(dlg,hh,mm,text);
		}
		saveEvents();
	}

	private void saveEvents() {
		CurrentStorage.get().storeEventsManager();
		eventsTable.refresh();
		EventsScheduler.init();
		parentPanel.calendar.jnCalendar.updateUI();
		parentPanel.updateIndicators();
	}


	private void updateEvents(AddNewClassDialog dlg, int hh, int mm, String text) {
		int rtype;
		int period;
		CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue());
		CalendarDate ed = null;
		if (dlg.enableEndDateCB.isSelected())
			ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
		if (dlg.dailyRepeatRB.isSelected()) {
			rtype = EventsManager.REPEAT_DAILY;
			period = (Integer) dlg.daySpin.getModel().getValue();
		}
		else if (dlg.weeklyRepeatRB.isSelected()) {
			rtype = EventsManager.REPEAT_WEEKLY;
			period = dlg.weekdaysCB.getSelectedIndex() + 1;
			if (Configuration.get("FIRST_DAY_OF_WEEK").equals("mon")) {
				if(period==7) period=1;
				else period++;
			}
		}
		else if (dlg.yearlyRepeatRB.isSelected()) {
			rtype = EventsManager.REPEAT_YEARLY;
			period = sd.getCalendar().get(Calendar.DAY_OF_YEAR);
			if((sd.getYear() % 4) == 0 && sd.getCalendar().get(Calendar.DAY_OF_YEAR) > 60) period--;
		}
		else {
			rtype = EventsManager.REPEAT_MONTHLY;
			period = ((Integer) dlg.dayOfMonthSpin.getModel().getValue()).intValue();
		}
		EventsManager.createRepeatableEvent(rtype, sd, ed, period, hh, mm, text, dlg.workingDaysOnlyCB.isSelected());
	}

	public void refresh(CalendarDate date) {
		viewer.setText(AgendaGenerator.getAgenda(date,expandedTasks));
		SwingUtilities.invokeLater(new Runnable() {